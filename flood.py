# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a4ElFVpyrb79Pk5yS1vEJX8VOyD5pYyF
"""

import pandas as pd
import numpy as np
import requests
import pickle
from sklearn.ensemble import RandomForestClassifier
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score,accuracy_score
from sklearn.preprocessing import LabelEncoder
'''!pip install twilio'''
from twilio.rest import Client

# Weather Data API (e.g., OpenWeatherMap)
def get_weather_data(api_key, location):
    url = f"https://api.openweathermap.org/data/3.0/onecall?lat={27.3333}&lon={88.6167}&exclude={part}&appid={ff164e0681a3de26c8766138771959f8}"
    response = requests.get(url)
    return response.json()

# River Level Data API
def get_river_level_data(api_key, river_station_id):
    url = f"http://api.riverdata.com/station/{river_station_id}?apikey={api_key}"
    response = requests.get(url)
    return response.json()

# Satellite Data (Google Earth Engine or NASA API)
def get_satellite_imagery(api_key, lat, lon, date):
    url = f"https://api.nasa.gov/planetary/earth/imagery?lon={88.6167}&lat={27.3333}&dim=0.1&date={9/26/2024}&api_key={Wi8VD4bZ9PabecSb8cTJYNzenvl3qRV32N6xhOD8}"
    response = requests.get(url)
    return response.json()

data.head()

# Load historical flood data (weather conditions, river levels, and flood status)
data = pd.read_csv('/content/flood_risk_dataset_india.csv')  # CSV containing features: rainfall, river_level, flood (1/0)

# Features and labels
X = data[['Rainfall (mm)', 'Water Level (m)']]
y = data['Flood Occurred']

# Split into train/test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train Random Forest model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Prediction Accuracy: {accuracy*100:.2f}%")

# Example real-time prediction
def predict_flood(rainfall, river_level):
    return model.predict([[rainfall, river_level]])

"""FOR REAL FLOOD ALERTS"""

'''def send_alert(message, phone_number):
    account_sid = "ACb020bd870920bbdcfcb8112a2d05bb99"
    auth_token = "30ab39a3f46ef460d0a611fa1bb0966f"
    client = Client(account_sid, auth_token)

    message = client.messages.create(
        body=message,
        from_='+19284278622',  # Twilio phone number
        to='+917362065730'
    )
    return message.sid'''

'''# If flood predicted, send alert
if predict_flood(100, 5.5):  # Example input for rainfall and river level
    send_alert("Flood warning: Evacuate the area immediately!", "+917362065730")'''

'''# Initialize Google Maps client
gmaps = googlemaps.Client(key='oCf3LWEueiLRetXV7hmw')

def get_evacuation_route(origin, destination):
    directions = gmaps.directions(origin, destination, mode="driving", departure_time="now")
    return directions[0]['legs'][0]['steps']

# Example route from town center to evacuation zone
route = get_evacuation_route("Town Center", "Evacuation Shelter")
for step in route:
    print(step['html_instructions'])'''

# Save the model using pickle
with open('model.pkl', 'wb') as f:
    pickle.dump(model, f)